// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")  // Use the environment variable for existing DB
}

generator client {
  provider = "prisma-client-js"
}

enum AuthRole {
  USER
  ADMIN
}

model User {
  id            String          @id @default(cuid())
  name          String?
  grade         String?  
  age           String?
  phoneNumber   String?  
  email         String          @unique
  emailVerified DateTime?
  image         String?
  role          AuthRole @default(USER)
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt  


  UserQuizzes UserQuiz[]
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
model UserQuiz {
  user_quizzes_id String   @id @default(cuid())  // unique identifier for the user-quiz relation
  user_id         String   // foreign key to User model
  quiz_id         String   @default("1")  // foreign key to Quiz model
  started         DateTime // when the user started the quiz
  finished        DateTime? // when the user finished the quiz (nullable)
  isActive        Boolean  @default(true) // whether the quiz is currently active
  current_question Int     @default(1)     // the index of the current question (starting from 0)
  createdAt       DateTime @default(now()) // timestamp when the entry was created
  updatedAt       DateTime @default(now()) @updatedAt // timestamp when the entry was last updated

  // Relations
  user             User        @relation(fields: [user_id], references: [id])   // related to the User model
  userQuestions    UserQuestion[]  // relation to UserQuestions
  UserAnswer UserAnswer[]
}

model UserQuestion {
  user_questions_id String   @id @default(cuid())  // unique identifier for the user-question relation
  question_id       String   // foreign key to Question model
  user_quizzes_id   String   // foreign key to UserQuiz model
  question_answered Boolean  @default(false) // whether the question was answered
  question_text_kz  String   // the question text in Kazakh
  question_text_ru  String   // the question text in Russian
  question_type     String   // the type of the question (e.g., multiple choice, true/false)
  riasec_code       String   // RIASEC code for the question (related to personality types)
  updatedAt         DateTime @default(now()) @updatedAt // timestamp when the record was last updated

  // Relations
  userQuiz          UserQuiz   @relation(fields: [user_quizzes_id], references: [user_quizzes_id])  // related to UserQuizzes
}

model UserAnswer {
  user_answers_id String   @id @default(cuid())  // unique identifier for the user-answer relation
  answer_id       String   // foreign key to Answer model
  question_id     String
  user_quizzes_id String // foreign key to UserQuestion model
  answer_text_kz  String   // the answer text in Kazakh
  answer_text_ru  String   // the answer text in Russian
  isPicked        Boolean  @default(false) // whether the answer was picked by the user
  riasec_score    Int      // RIASEC score for the answer selected by the user
  createdAt       DateTime @default(now()) // timestamp when the answer was selected
  updatedAt       DateTime @default(now()) @updatedAt // timestamp when the record was last updated

  // Relations
  userQuiz          UserQuiz   @relation(fields: [user_quizzes_id], references: [user_quizzes_id])  // related to UserQuizzes
}